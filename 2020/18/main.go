package main

import (
	"fmt"
	"strings"
)

func main() {
	run(input)
	run2(input)
}

func run(input string) {
	var total int
	for _, line := range strings.Split(input, "\n") {
		result, _ := eval(line)
		total += result
	}
	fmt.Println(total)
}

func run2(input string) {
	var total int
	for _, line := range strings.Split(input, "\n") {
		result, _ := eval2(line)
		total += result
	}
	fmt.Println(total)
}

func eval(in string) (result, used int) {
	var op byte
	var val int
	for i := 0; i < len(in); i++ {
		c := in[i]
		valSet := false
		switch {
		case c == '(':
			val, used = eval(in[i+1:])
			i += used
			valSet = true
		case c == ')':
			return result, i + 1
		case c >= '0' && c <= '9':
			val = int(c - '0')
			valSet = true
		case c == '+' || c == '*':
			op = c
		case c == ' ':
		default:
			fmt.Printf("unexpected value %c\n", c)
		}
		if valSet {
			switch op {
			case 0:
				result = val
			case '+':
				result += val
			case '*':
				result *= val
			}
		}
	}
	return result, len(in)
}

func eval2(in string) (result, used int) {
	var vals []int
	var ops []byte
	for i := 0; i < len(in); i++ {
		c := in[i]
		switch {
		case c == '(':
			// recursive call will return the value of the bracket and tell us
			// how much of the input string was used
			val, used := eval2(in[i+1:])
			i += used
			vals = append(vals, val)
		case c == ')':
			// End of the bracket - evaluate what we have so far and return it.
			// Should only happen if this call to eval2 was made to evaluate a
			// bracket
			in = in[:i+1]
			break
		case c >= '0' && c <= '9':
			vals = append(vals, int(c-'0'))
		case c == '*' || c == '+':
			ops = append(ops, c)
		case c == ' ':
		default:
			fmt.Printf("unexpected value %c\n", c)
		}
	}

	// Evaluate all pluses, left to right
	for i := 0; i < len(ops); {
		op := ops[i]
		if op == '+' {
			vals[i] = vals[i] + vals[i+1]
			// Remove 1 op and 1 val
			copy(vals[i+1:], vals[i+2:])
			vals = vals[:len(vals)-1]
			copy(ops[i:], ops[i+1:])
			ops = ops[:len(ops)-1]
		} else {
			i++
		}
	}
	// Everything remaining should be multiply
	result = 1
	for _, v := range vals {
		result *= v
	}

	return result, len(in)
}

var input = `8 + ((9 * 7) + 2) + (4 * (9 * 3 * 9 + 3 + 8) + 6 + 5 + 8)
7 + 5 * 3 + (9 * 9 * 3)
4 * (4 * 8 + 3 + 4 * 2 + (8 + 2 * 6 + 6)) + (6 + 9 + 8) * 8 + (6 + 6 * (2 * 9) * 3 + (9 * 3 * 5 * 4) * 7)
((4 * 3) * 2 * 2) * 4 * 5 * 5 * 7 * ((3 * 3 + 6 * 8) * 7 * 3 * 9 + (7 * 6 + 9) * (4 * 3))
8 + 6 + 9 + ((8 * 2 + 7 + 9 * 7) * 6 * 9 + (8 * 2) * 5 * 2) + 9
(9 + 8 + 4 * 9 * 9) * 9 + 8 * (2 * (7 * 2) + 8) * 2
5 * 9 + 6 * 3 + (5 * 7 * 5 + 4 * 8 + 4)
((7 * 9 * 3 * 8 * 6 * 6) * (9 * 2 + 4 * 3) + 9 * 3) * 2
2 + ((8 + 3 + 6 * 6 + 5 + 9) * 4 * 7 + 6 * 4 + (6 + 8 * 5 * 9 + 3)) + 9 + 7 * 7
((7 * 9 * 5) + 9 * (8 + 2)) + 2
3 * 6 * 8 * (9 + 5 * 8 + 4 * 8) + 8
9 + 8 * (3 + 9 + (3 * 7) * 3 * 4)
((6 + 8 + 5 * 3 + 7) + (5 + 6) * 8) + 9 + 2
(5 * (3 * 2 * 4 + 9 + 5)) * 8 + 5
(8 * 2 * 5 * 4 * 3) + 5 + (3 * (6 + 8 * 8)) * 3
4 * 5 + (9 * 3) + (7 * 9 * 3 * 7 * 6) + 4
6 + 2 * 2 + 8 + (3 + 4 + (4 + 2 + 7 + 5) * (3 + 8 + 7 * 9 * 2)) * 2
(3 * 5 + 3 + (6 * 4 + 3) + (4 * 4 * 9) + 7) * 3 + 8 + (5 + 2 * 7 + 2) * 3 * 7
6 * 7 + (2 * 7 + 9 * 2 + (3 + 6 + 6 + 9) + (7 + 8)) + 6 * 8 + 6
8 * (6 * 8 + 3) * 8
(6 * 4 + (8 * 8) + 5 * 6) * 5 * 8 * 5
8 * (3 * 6 * (7 + 5 + 8 * 6 + 5)) * 2 + 4
(7 + (8 * 3) * 5 + 8) * 8 * ((5 * 9 * 3 * 8) * 7 * (3 + 2 + 6 + 9) * 2 * 3 * 9) + 2
(4 + 5 + 5) * (6 + (6 * 5 + 3) * (8 * 6 * 6 + 8 + 6)) * 2 + 4 + 3 * 8
5 + 6
6 + 5 * (6 + 3 + 5 + 5 * 2) * 5 + 3 * 9
3 * 7 + (8 * 2 * 4 * 2) * 4 * 3 + 9
(2 + (5 * 5 * 6 * 8 + 7) + 8 * 5 + 9) + (8 + 4 * 4 + 9 * 4 * 6) + 8 * 6
(3 * 3 + 5) * 6 * 6 * (7 * (4 * 3 + 4))
7 + (9 * 4) + ((3 * 2 * 7 + 8 + 4 + 2) * 4 * 3 + (9 + 5 + 6 * 5 + 5) * 4) * (8 + (7 + 9 + 3 * 2 + 8) * 8 * 6 * 3)
9 + 7 + ((5 + 3 * 4 + 9) * 4 + 7 * 9 * (7 + 7)) * 6 + 6 * (6 + 6 + (6 * 7 + 7 + 4) + (6 + 2 * 6 + 3 * 5) * 6 * 8)
5 + (9 + 5 + (9 * 8 * 5) + 3 * 5) * 7 + 7
(9 * 5 + 3 * (9 * 4) + 7) * 2 + 9 * 9 * 8
9 * 5 * (6 * 6 * 7 + (5 + 4 + 3 + 8 + 3) + (7 * 9)) * (4 * 7 * 4 + 4 * (2 + 2 * 8 * 6 + 9 + 4) * (8 + 8 * 6)) + 9 * 4
7 + 3 + ((7 * 9 + 9 * 3 + 3 + 2) + 6 + 7) * 6
7 + 7 * (9 * (2 * 4 * 7) * 2 + (2 + 5 + 4 + 7 + 5)) * (5 + 7 + 4 * (3 * 4) + 7)
4 + (9 + 3 + (5 + 4 + 6 + 4) + 3 + 3)
(5 * (6 * 6 * 8 + 8 * 9 * 8) * 5 + 2) * 3 + 5 + (6 + 3 + 5)
(5 * 3 * 6) + (6 + (9 + 3 + 9 + 6 * 2 * 4) + 6 + 3 * 9) * 2 * 8 * (3 * 2 * 2 + 6 + 3 + 8)
8 + 6 + 8 + 6 + ((8 * 4 * 7 + 8 * 4) * 4 * 8 + 5)
(8 * 8 + (9 * 2 * 6 * 3 * 5 + 7) + 6 + 9 * 8) * 5 * 8 * 2 * (8 + 8 * 9 * 9) + (9 * (6 * 8 + 9 * 3 * 4 * 5) + 8 + (8 + 5 + 4 * 6) * (8 * 8))
(8 * (4 + 3 * 8 * 2 + 6 + 9) * 5 * 7) + 4 * (2 + 4) + 5 + 7 + 9
3 * 4 * 9 + 7 * (2 * (7 * 6 + 5 + 2 + 5 + 8) * (6 + 8)) + (7 * (5 + 8 + 2 * 7) + 4 + (7 * 4 + 5 + 4 * 3) + 7 * 7)
((9 + 6 * 7 + 8 + 5 * 3) * 8 + 3 * 7) + 8 + 3 + 4 * 5 * ((6 * 7 + 2 + 4 * 4) * 9 + 6 * 4 + (9 + 8) * (6 * 4 * 2))
(6 + 6 * 3 * 4) + 2 * (5 * (8 * 8) * 8 * (8 + 6 * 6 + 3 * 9) * 3) + ((8 + 5) * 7 + 6 + 9 + 6) + 8
(3 + (5 + 7 * 2 * 5 + 3) + 2 + (5 * 4 * 2 + 9 * 3) * 4) + 9 * 2
(3 * 8 * 2) + 6
7 + 3 * (8 + 8 + 9 * (6 + 7) * 7)
5 + 2 * 2 + (4 + 4 * 2 + 2 + 2 + 4) * 4 + 6
7 * ((6 + 7 + 6 * 8 + 4 + 3) * 6 + 9 * 7 + (5 + 4 * 7 * 7)) * 9
((9 * 7) * 9) * 7 + 9 * 3 + 3 + 2
2 + 9 * (5 * 4 * 6 * (5 * 4 + 4 * 2 * 6 * 3) * (2 + 5 + 5 * 9)) + 5
8 * 3 * 8 * ((7 * 3 + 8) * 6 * 8 * 9 + (3 + 9 + 9 * 2 * 3) * (7 * 2 * 5 + 9 * 3))
6 * (6 * 5 + 6 + 5 * 9 * 7) + 2 * (7 + 3 * 3 * 7 + 4) + 3 + 8
4 + (8 * 5 * 7 * (7 + 8 + 6) * 6) + 4 + (2 * 6 * 5 * 4) + ((8 + 6 + 7 + 3) + (3 * 3 * 8 * 5) + (3 + 3 + 2))
2 * 5 + 4 + 7 * (7 + 8 * 5 + 9 * 3 * 7) * 6
3 * 6 + ((7 * 7 * 9 * 9 * 6 * 6) + 2 * (8 * 6 + 5 + 2 + 5) + 7 * (7 * 8 * 2 + 6 + 2 + 8) + (9 * 3 + 2 + 8 + 9)) * 4
3 * 2 * 8 * (7 * 4 + (6 + 9 + 3 + 7 * 2))
(7 * 6 * (2 * 4) * (2 * 5) * 8 * 4) + 6 * 9 + 7 + 5 + 4
((8 * 6 + 2 + 9 * 4 * 7) * 2 * 6 * (6 * 5 * 7)) * 5 * (3 * (5 * 3 + 4) + 6 * 5 + 8) + 6
5 + 7 + 2 + 7 + (5 * 3)
((3 + 2 * 9 * 5 + 9) + 9 + (3 + 8 * 6 + 8) + 8) + 6 + 8 + 4 * 8 * ((2 + 3 + 9 + 6 + 4 * 7) * 6 * 8 * 6)
9 * 5 * 7 + 8
9 * 9 + 2 + 7 + (8 + 9 * 9 + 3) + 2
9 + ((3 * 7 * 4 + 8) + (7 + 2 + 2 * 7 + 2 + 4) + 7 * 7 + 6) * (3 * (6 * 7 * 3 + 8) + 4 + (7 + 4 + 4 + 9) + (3 + 8 * 4) + 7) * 2 + 9
3 + (5 + (9 * 4 + 5 + 4 + 3) * 4 * (7 * 6) + 6) * 5 * 9 + 9
7 + (9 * (2 + 8 * 8 + 5) * 2 + 7) * 6 + 2 + 4 + 2
(6 + (9 * 4 + 7 + 8 + 5)) + 3
8 * 8 * 9
6 + 5 * ((2 * 4) * (6 * 6 * 9 * 6) * 4 + 2 * 3 * 2) * 2 + 8
8 + 5 * (9 + 6) * (2 * (6 + 3 + 7 * 2 + 7) * 7)
4 * (7 * 5 + 6 * 4) * 2
(4 + (8 + 3 * 5 * 6) * 2 * 4) + 4
9 * 6 * 2 + 5
2 + (6 * 9 + 6 + (8 + 4 * 6) * 6 * 3) * 9 * 9 * 3
7 * ((9 + 8 + 9) * 8 + 2) + 5 * 4 * 6
8 * ((2 * 9 * 9 * 4) + 9 * 9 * 5 + 9) + 7
((9 + 5 * 7 + 2 * 4 + 8) + 4) + 6 + 9 + 8 * 5
(2 * 9) * 7 + (3 * 7 * 6 + 6) * 2 * 2 + (4 + 8 + (2 + 8))
((4 * 2) * 2 + 2 + 6) + 6
(6 * 9 * 8 + 8 * 6) + 8 * (8 + 8 * 4 + 4)
((2 * 2 * 2) + 6 * 6 + 8 * 2 + 3) * 2 * (9 + 3 + (3 * 9 * 5 + 2 * 6 + 6) + (3 * 2 * 8 + 9 + 6 + 7)) * ((5 * 2 * 2 + 6 + 4 * 2) + (8 + 8 * 5 * 7) + 8) + 9
9 + (8 * 4 * 9 * (9 * 6 * 8 * 9)) * 9 + 3 * 5
8 + 4 + 2 * ((8 + 5 * 8 + 2) + 9 * (7 * 7 + 7 + 2 * 6) * (6 + 6) * 2 * 8)
(6 + (8 * 4) * 7 + 3 * (4 * 5 + 8 * 5) + 5) + 7 * (7 + 9 * (8 * 5 * 6 * 9 + 6 * 7) + 9 * 4)
6 * 3 * 3 + (3 * 6 * 9 * (3 * 9 * 7) * (5 * 4 * 4) + 5) + ((2 * 9) * 3) + 5
(4 + 8) + 3 + 4 + 3 * 7 + 4
(6 * 3 + (5 * 3 + 9 + 4 + 5)) + (7 + 8 + 2 * (4 * 7 * 6 * 7 * 8 + 7)) * 5
(7 + (8 + 4) + 4 * (2 + 8)) + 4 * 5 + 2 * 9 * (5 + 9 + 6 + 4 + 6 + 8)
((6 * 4 + 6 + 7) * 5 * 2 * 2 + 2) + (2 + 5 * 7 + 2) + 6 + 4 * 7
(6 + 2 + 2 + 5) * 6 + 3 * 7 + (8 + 9 * (7 + 7 * 5) + 3) + 8
(3 + (7 * 3 * 6 * 3 + 7) + 2 + 2 + 8 + (7 + 2 * 6 + 6 + 4)) * 5 + 5 * 3 * 6 + 6
6 * (6 + (4 + 2 + 6 * 3) + 2 + (6 + 6) + 8) * 3
(9 + 9 + 6 * (6 + 7 * 2) + (2 * 2 * 8 * 3) * 3) + (5 + (2 * 6 + 9 * 4 * 4 * 7) * 5 * 7 + 9) + 6
((7 + 5 + 9) + 9 + 3) * (2 + 9 + 8 + 4 * 2 * 6) * ((5 + 2 + 8) * (8 + 8 * 7) + 7 + (4 + 6) * (9 * 3 * 8 + 9) + 8) * 9
5 * 4 + 5 + ((5 + 4 + 7 * 8 * 4) + 6 + 4 + 2 * 6)
5 + 7 + 7 * 2 + 7
(5 * 4) * 2 * (4 + 3 * (2 + 6) + 3 * (8 * 6 * 7)) * 4
4 * (4 * 8 * (4 * 6 + 4 * 5 + 2) * (2 + 5) * 7 * 8) * 7 + 8
9 + 9
9 + 8 * 3 * 8 + ((7 * 3 * 3) * 2) + 6
4 * (3 * 5 * 3 * (2 * 4)) + 3 + ((8 + 5) * 3 * 9 * 4) * 7 + 2
(7 * 2) * 2 * 7
4 * 8 * 2 + 2 + 9 + 2
5 * (6 + 8 + 7 * 3 + 7 * (9 + 2 + 3 + 6 + 6 * 6)) * 8 * ((7 + 4 * 8 * 5 + 7) + 2 * 5)
7 + (3 + (7 + 2 * 9) * 3 * 2 + 7 * 7) + 5
5 * ((7 * 8 * 2) + 2 * 5 + 9 * 8) * 3
(7 * 5 + 9) * 4 * 2 * 7 * 8 * 3
9 * 7 + (6 * 3 * 4 * (4 + 7 * 5 * 4 + 9) + 7) + 3 * 3
(3 * 5 * 6 * 5) + 2 + 3 * (8 * 5 * 8 * 2) + 4
4 + 2 * ((4 * 2 + 3 + 6 + 4 + 6) * 8)
7 + (5 * 8) * 4 * (7 + (7 + 4) * 6)
4 + 5 + 3 + (3 + 4 + 5 * 3) * 9
((3 + 4 * 4 * 9) * 7 + 4) * 7 + 8
7 + 5 * 2 + (7 * 5) * 5
2 + 8 * 5 * 4 * 9 + (5 * 8 + 4 + 8 * 2)
(4 * 9 * 7 * 9) * ((5 + 4 * 7 + 8) + 9 + 7 * 7 + 9 + 8) + 9 * 7 * 5
(8 + (3 * 7 + 8 + 6 + 5) + 2 + 8 * 8) + 9
2 + (6 * 9) * (2 + 6 * 2 * 5 * 9) + 4
4 + (4 * 2 + 4 + 8 * 8 * 4) * 6 * 4 * 5 * (4 * 5)
(2 * 5 + 5 * 9) * 7 * 4 * (6 + 2 * 5 + 2 + (5 * 2 * 7) + (6 + 9)) * 9 + 4
4 * 9 * (2 + (5 + 2 + 6 * 6) + 4 + 4 * (2 + 9 * 8))
8 + 2 + 5 + 8 * (3 * (7 * 3 + 2) * 9) + 3
7 * 6 * 6 * 5 + 4 * 6
2 + 9 * (4 * 3 * 2 + 5) + 2 + (4 + 5) * 4
((5 + 4 * 4) * 7 + 7) * 3 + 6 + 5 * 2 + 8
9 * ((5 + 8 + 5 * 6 + 5) + 5 + 3 * (3 + 5) * 2) + (2 + 6 + 4 * (5 + 4 + 5 + 5 + 5)) * (8 * 9)
6 + 4 + 7 * 8 * 4 + 3
((5 * 9 * 4 + 9 + 6) + 5 + 8 + 2 + 6 * 5) * 8 * 9 * 4 + 8 + 4
(8 + 9 + (9 + 6 + 2 * 2)) + 5
(8 + 3 + 5 * (8 + 4)) * (4 + 6 * 4 * (3 * 4) * 5) * 4 * 8 * 7
9 + 2 + (6 * 7 * (3 * 9 + 7 + 9 + 8 * 9) + 7 + 2) + 2 * 5
3 + (2 + 6 + (3 + 3 * 2 + 8 * 7) + 5) * 3
((4 * 4 * 6 * 2 * 2) + 9 * 6) * 2
(4 + 6 + 2 + 7) + 8
(4 + 7 * (9 * 6 * 8) + 3 + 4 * 6) * 2 + 3 + 2 * 7 * 6
(4 * 6 + 2 + (9 * 2 + 5 * 7) * 9) + 8 + (7 * (5 + 8 * 8 + 4)) * (5 + 4 + 3 + 3) + 8
5 + 2 + 6 * 8 * (5 + 3) * (9 + 7 + 3 + (2 * 5 * 4 * 7 + 7 * 6) + 8)
7 + 3 + 4 * (9 * (6 + 4 * 7 * 5 * 3) + 2 * 6)
5 + 3 * 4 + 3 + (7 + (2 * 5 + 8 * 6 + 9) + (2 + 8 + 6 + 8))
2 + (2 + 7 * 6 * 8) * 7 * 5 + 3 + 8
9 * 9 * 5 * ((4 + 9 + 2) * 7) * (2 + 3 + 4)
7 * (3 + (5 + 4 + 4 * 2) * 9 + 2 + 2) + 9 * (2 * 9 * 5 * 7 + 9 + 7) + 9
9 * (6 + (6 + 9 * 8) + 6 + 2 * (3 * 8 * 8 + 9 + 6 * 8)) * 8 * 8 * 3 * 9
4 * (5 * 8 * 3 * 3)
(2 * (2 * 4 + 6 * 7 + 2) + 8 + 8) + 4 * 6 + (2 * 6 + 6 + 6 + 2 * 4) + 6
7 + (2 + 7 + 2 * 7 * 4)
(9 + (2 * 2)) + 7 * 8
3 + (4 + 8 * 9 * (7 + 4 + 3 * 5 + 4 * 7) * 4) * 4 + 6 + 7 + 9
2 * (3 * 9 + 5 * (7 + 4 * 2 + 4 * 6) * 6 + 4) * 7 + (2 + (3 + 8)) + 3 * 2
((6 + 8) + 6 + 6) + 2 * 3 + (8 + (2 * 3) * (8 + 9))
8 * 9 + (5 + 3) * 4 + 4 + 9
7 * 9 * (7 * 8 + 8 * 2 + (9 + 8 * 9) * 8) * 4 + 2 + 6
6 * 4 * 9 * 3 + 2 * 8
4 * 4 * 8 * (7 * 7 * 6) * 2 * 4
5 + 7 + 9 * (6 + 2 + 9 * (8 + 7 + 9 * 9) * 4) + 4 + 6
(6 + 5) * 2 + 9 + 3
9 + 6 + (5 * 8) + 4 + (8 + 7 * 5)
4 * 8
8 * 3 * 9 * (2 + 6 * (6 + 7) * 5 + (2 * 9 + 9 * 8 + 7 * 8)) * 8 * 3
9 * 5 + 4 + 7 * ((4 * 4 * 6 * 7 + 9 * 2) + 7 * 3) * 6
7 * (7 * 5 * 3 * 5 * 5) + 4 * 8 * 6 * 3
8 * (8 + 7 * (3 + 8 + 2 * 8 * 8 + 2) * 2 + (6 * 5 + 9 * 5 * 6 + 7) + (8 + 2)) * 4 + 3 * (2 * 7 * 9) + 8
3 + 2
6 + 6 + 4 * 4 + (9 * 9 * (3 + 5 * 3 * 4) + 6 + 3)
6 + (4 * 2 * 8 + 7 + 8) + 8 * ((9 + 6 * 3) * 2 + 5) * 4 * 9
8 + (2 * 9 * 3 * 5 + 2 + 3) * ((2 + 9 * 9 + 9 * 8) * 6 * 2 * 5)
2 + 3 + (8 * 7 * 7 * (5 + 3) * (2 + 4 + 6 + 4 * 5 + 7))
8 + (5 + 4 + 4) * ((7 * 6 * 6) * (3 * 7 + 5 + 2) + 5 + 6)
7 * (8 * 2 + 5 + (7 * 6)) * 2 + 2 + 8
8 + ((6 * 6 * 8 + 9 * 3) + (8 + 2 + 9 * 2 * 6) + 2 * 8 * 2 + 4) + 4 + 9 + ((5 * 6 * 5 + 4) + 6 + 5 * (4 + 5 + 7 * 9 * 3 + 6) + 4 + (8 * 7 + 8 + 7)) + (8 + 8 + 9 * 9)
3 + ((7 * 6 + 5) + 2 + (4 + 8 + 7 + 4 + 7 * 7)) * 2 + 4
6 * (5 + (7 * 4) + 4 * 7) * 6 * 9 * 4 * 2
5 + 8 * 2 * 7 + (9 * 8 + 7)
8 * (3 * 9 * 2 * (5 * 3 + 6 * 6 * 9) * 6)
(4 + 9 * 2 + (7 * 7 * 8 + 9) * 2) + 2 + 6
(8 + 9 * (4 + 9 + 9 * 6 + 2 + 7) + 5 * (7 * 6 + 5) * 3) + 6
4 + (9 * (3 * 6 + 9 + 3 * 6) + 7 + 3 + 4 + 5) * 6 * 9
4 + 7 * (6 + (2 + 7 * 8 * 9 + 5 * 4)) + (3 * 2 + 2 * 9 * 8 * 8)
(5 * 9 * 3 * 2 * 5) * 3 + (7 * 9) + 5 * (5 + (3 * 9) + 2 + 8 + 3)
(4 * (6 + 2 + 3 + 7 * 4 * 9)) * 8 * 5 + 4 + 9 * 8
3 + 4 + 8 * ((2 + 3 + 8) + (2 * 9 + 7 * 7) + 2 + 3 + 6 + 4) + 8
2 * 4 + 7 * (6 * 2)
7 + (8 + 7 * 9 * 9) * 4 * 8 + 8
3 * (3 + 4 + 5 + 7 + (7 * 3 + 6 + 6 + 2 + 3) * (9 * 7 * 5)) * 9 * 4 * 2
3 * 3 + 8
3 + 2 * (8 * 5 * 9 + 3 * 9) * 8 + 8 * (4 * 2 + 4)
(6 * 6 * 7 + 4) + (5 + 3 + 9 + 7 * 7)
9 * 4 * 4 * 9 + 8 + (8 * 5 * 3 + 8)
(7 * 4 * 7 + 4) * (4 * 9 * 3 * 2) + 2 + 6 + 6 + 6
5 + 7 * 2 * ((6 * 9 * 6 + 8 + 5) * 6 + 8 * 2 * 3) + 6 * 6
6 + (3 * (2 * 5 * 3) + 5 * 3) * 4 + 5 * 2
5 * (5 * 2 * 5 * (7 * 6 + 2))
9 + ((7 * 5 + 7) * 6 + (9 * 6)) * 4 * 7 * 7 + 7
7 + 4 * 2
4 + ((9 + 4) * 6) * 5 * 4
7 * (6 * 6 + 4 * 5 + 5 + 5)
6 + (9 * 6 * 8 * 9 + 7) * 9 * 3 * 6
9 + 7 * 5 * (7 * 5 * 9 + 8 + 4 * 4)
8 * 6 * (2 + (7 * 6 * 7 + 9 + 9) + (5 + 8 * 8 + 9 * 9 * 8) + (6 * 8 + 7 + 4) * 9 * 2) * (9 + 3 * 3 + 5) + 9
4 + (2 * 9 * 2) + 4 + 9 + 2 + 7
6 + (3 * 6 * (9 + 3 * 6 + 2) * 4 + (9 * 7 * 4) + 8) + 8 * 6 + (2 * 7)
7 * (2 * 2) * 9
8 + 6 * 4 + 6 * 2 + 7
3 * 3 * 8 + 3 * (8 + (4 * 4 * 6 * 4 * 6) + 6 * (7 + 5 + 4 * 6)) + 4
(7 + (8 + 7)) + (3 * (6 * 7 + 6 + 7 + 6 + 3) + 2) * 2 * 4 * 9 * 8
7 + 8 + 9 + (5 + 9 * (2 + 9 * 7 + 2) + 7 * 6 + (3 * 5 + 5 * 8 * 5)) + 9
(6 * (9 * 7 + 3 * 8 * 3 + 2) + 9 + 2 * 2) * 8 * 5 + (4 * (8 + 6 * 9 * 6 * 6) + 7 + (9 * 9 * 3 * 3 + 2 + 8) * 2) * 3 + 4
((7 * 2 * 7 * 9 * 2 + 5) * 7) * 8
(2 + (8 * 3 + 6) + 8 * 6 + 3 * 7) * 8
(6 * 2 * 2 * 4 * 3) + 5 + 7
(8 + 7 * (7 * 6 + 8) * 4) * (6 * 7 * (5 * 9 * 5 + 7 + 2 * 6))
5 * (8 + (8 + 3 + 8 * 5 + 2) * (8 + 3 + 7) + 7) + (4 + 7) * 5 + 8
(9 + 6 + 7) + (9 + 7 + 7 + (6 + 8 * 4 + 4 + 6 * 4) + 8) * ((6 + 4 + 5) * 4 * 4 + 7 * 6) + 3 + 3 * 8
(6 * 5 * (2 * 8 + 2)) * 8 + 5 + 4 + (9 * 8 + 8 + 4 + 8)
2 * 7 * ((4 * 6) + 8 * 8 + (7 * 3 * 9 + 2 + 6 * 3) + 9) + 3
2 * 7 * (2 + 2 * 6) * 9
5 * ((9 * 6 * 5) * 5 * 3) * 2
9 * (3 * 2 + (7 + 5 * 7 + 4 + 8 + 7) * 8 + 8 + 4) + 4 + (2 * 4 * 4 + 4 + (8 + 2 + 8)) + 8 + 3
(5 * 8 * 4) + 3 * 4 + 8
7 + 7 * 9 * 6 + (2 + 8 + (4 * 8 + 3))
(5 * 6 * 5 * 5 * 3 + 7) * 4 + 9
(3 + 4 * 7 + 6 + (7 + 9 * 6 + 4)) * 6
9 + (9 * 2 + (2 + 9 + 6 + 3 * 4 + 6) + (4 + 8 + 2 + 6 * 2 + 7)) * 9
4 + (5 * 8)
4 * 3 + 7 * (8 * 8 + 4) * 5
4 * 6 * 4 + (2 + 6 + 4 * (9 + 8) * (6 * 3) * (3 * 3)) + 9 + 5
5 * 5 + 6 * (9 * (9 + 3 * 7 * 6 * 6 * 3)) * 4 * 8
2 + 8 + 3 * 7 + (3 + 6 * (3 + 9) + (9 + 5 * 4 + 6 + 8 * 3))
7 + 3 * 3 + ((3 * 2 + 2 + 2 * 5 + 8) + (8 * 8 * 5 + 5) * 7 * 4 + 2) + 7
4 * 5 + 7 + 7 * (5 + 5 * 9) * 4
9 + 6 + 6 * ((2 + 2 * 8) + 8 + 3 + 3 * 9) * 4
9 + ((3 * 2) * 3) * 9 + 8 + 4
(6 + (4 * 9 * 4 + 2 + 3) * (9 + 5 + 2) + 5) + 6 * 4 + 5 * 6 + 8
3 + 8 * 9 + 3 + 5
(6 + (3 * 9 * 3 + 2 * 7 * 9) * (5 + 7 + 2 * 7 * 8)) + 2 + 8 * 2 + 7 + 2
6 * (5 * 9 + 8 + 5) * (5 + 9 * 7 + 7 * 9 * (2 + 6 * 2)) * 5
6 * ((6 * 3 + 6 * 2 + 8) + 8 + (3 + 2 * 5 * 7 * 4) + (8 + 7) + 4)
5 + ((2 * 4 + 4) + 9) + (2 * 6 + 5 + 8 * 2) + 5 * 4 * 6
(8 * 6 * 6 + 4) * 7 + 5 * (7 + 8 + (4 * 6 + 7 * 3 * 6 * 7) * (9 + 6) * 7) + 7
3 * (4 * 3 * 9 + 3 * 6) * (6 * 5) + 4 + 2 * 9
(9 * (4 + 2 * 5)) * 7 * 9 + 4
(9 * (9 * 2 * 3 * 5 + 6 * 6) + 6 + (6 * 9 * 2)) * 6 * 7
(8 + (3 + 9 * 6 * 3)) * (3 + (2 + 2 + 5) * 2 + 3) + 8 * 4 + 5 * 2
3 * 6 + (4 * 8)
(5 * 4 + 2 * (2 + 8 * 7 * 8 * 7) * 7) * (7 * 7)
6 * 9 * 2 + 2 + 6 * ((6 + 6 + 9 * 5) + 2)
6 + 8 * (5 + (9 * 3 + 3) * (9 * 9 + 3 + 6 * 3 + 2) * 5 + 4 * 4)
(5 * 3 * 5) * (3 * 4)
6 + (5 * 2 * 3 + 6) + 5 * 3
7 * (7 + 2 + 5)
(3 + 3) + 2 + (2 * 4 + 3) + 5 + (8 + 4 + 4 * 2 * 4)
5 + 4 + (9 * 3 + (7 * 9 + 6 + 3)) * 2 * (3 + 9 * 7 + 9) + 9
(6 * 8 * 6 * 2 * 3 + 9) * 3 + 2 + 7 + 9
(5 * 3) * (4 + 8 + 3 * 5)
(4 * (3 * 3 * 9 * 6 * 9) + 6 + 7) * 4 * 2
6 + (3 + 7 + 7 + 9 + 5 * 6) * (3 + (6 * 6 * 2 + 7 * 9) + (2 + 8 * 2 + 2) + (7 + 7) + 3) * (2 + 2) + 8
4 * 9 * 7 * 7 + ((4 * 3 * 9) * 6 + (7 * 8) * 3 * (5 + 9 + 9 * 8 + 6) + 8)
8 + 6 * 4
(3 * 6) * 9
((6 * 3 * 8 + 2 * 3 + 7) * 4) * 2 + 7 * 3 * 8 + (5 * 6 + 4)
8 + 4 + (4 * (6 * 7 * 9 + 7 + 3) * (2 + 7 + 7 + 5 * 6) + 6 + 7) * 3 * 3
(6 * 3 * 9 * 6 * 8) * 8 * (6 * 7) + 6
(8 + 2 + 2) * 7 * 4 + 9 * (3 + 7 + 7 + (2 * 9 * 4 * 9 * 5) * 4)
6 + 7 + (2 * 3 * 5 + 7 + 2 + 6) + 2
5 + (8 + 3) + (6 * 2 + 9 + 9 + 3) * (9 + 7 * 2 + 7 * 7 * 7)
3 * ((2 + 6 + 2 * 2 * 4) + 4 + (3 + 3 + 6) * 5 + 4) + 9 + 3 * 8 * (7 + 8 + 9 + 7 + 7)
(6 + 9 * 2 + 3 * 2) + 4 * 3 * 6 * 8 * 6
7 * ((3 * 8 + 3 + 3) + 8) * 4 * 9 * 9
4 + 4 + (8 * 4 * 9 + (2 * 9 * 6 * 3) + 6) + 2 * 7 * 5
(4 + 5 + 9 + 9 * 2 * 5) + 5 * 6 + 8 + (4 * 2 * 5 + 9)
8 + (5 + 2 + 4) + 7 + (8 + 2 + (2 * 3 * 7 * 6 * 5 * 8) * 4 + 4 * 6)
5 * 8 + 3 * (5 * 6 * (4 + 7 * 2 * 5 + 5 * 6) + 7)
6 * ((3 + 8 * 3 * 9) * 4 * 8) * 4 + 8 * 4 + 3
4 + (9 * 8 * 9 * 4 + 5 * (5 * 2 + 2)) + 8 * 2
6 + 3 + 9 + (4 * 4 + 3 * 6)
9 * 3 + (6 * 6) + 6 + 6
((2 + 3 * 3 * 4 + 4 * 4) + 8 + (8 * 2 * 5) * (7 * 3 * 2 + 4 * 7 * 9) * (3 * 6)) * 9 * 6
9 * (6 * 5 + 3 * 6 + 8 + 7) + 5 * 2
9 * ((6 * 7 * 8 + 2 + 7 * 5) + 4 * 9 + 8 * 3 + 3) + (7 * 6 * 4 + 8 * 9 + 8)
5 + ((3 + 2 * 3 * 3 + 4 * 3) * 9 * 4 + 5)
4 + 7 + (9 * 5) + 5 + (5 * 4 + 9 * 9)
9 * 6 + 2 + (3 + 7 * (9 * 4 + 7 + 2) + 7 + (7 * 9 * 5 * 6 * 6)) * 6 * 8
(6 * 2 + 7 * 2) * 6 * 9 + 3
2 + 2 + 2 * (6 * 6 + 3 * 9) + (5 * 3 + 7 * 4 + 8 * 8) * 7
(5 + 7 + 7 * (8 + 5 * 5) * 8 * 3) + ((6 * 9) + 5) + 8 + 3 * 9 * (2 * 5 * 2)
(3 + (5 * 5 * 2 * 2 + 4) + 7) + (8 * 6 * 8 * (7 + 9 + 3 + 8 + 3)) + (8 * 7) * (8 * 3 + 3 + 2 * (8 * 7 + 8 + 5) + 3) * 8
6 + ((3 + 9 + 9 + 4) * (2 + 3 + 6 * 8 * 8 + 3) + 4 + 7 * 3 + 2) + 8
(2 * 3) + 4 + 7 + (8 + 8)
3 + 6 * (6 + (5 * 9 + 3 * 8 * 6) + 5)
(8 * 5 + 7) + 2 * 4
4 * 6 * 7 * 4 * (4 * (8 + 6 + 8) + 2 * 2 * (3 + 6 * 4 + 5 * 9 + 7) + 5)
2 + ((5 + 4 * 4 + 3 + 5) * (3 * 9 + 7 * 2 * 3 * 6) * (9 * 7 + 2 * 2 + 5 * 3) + 6 + 2 * 9) * 3 + 9 * 3 * 9
6 * 3 * (7 * 8 * 7)
7 * 3 * ((6 * 2 + 9) * 3 * 3 * (9 + 2) + (7 + 5 * 5 + 6 + 5) + 6)
(5 + (9 * 7 + 9 * 6 + 3 * 5) * 7 * 9) * 5 + 8 + (6 + 3) + (6 + 9 * (6 * 7 * 5 * 3 * 5))
(3 + (6 + 9 + 7 + 6 * 8 + 7) + 3 * 5 * (7 * 3 + 8)) * 2 + 2 * 3 * 5
6 + 7 * 7 + (9 * 3 + (5 * 8 * 9 * 9) + 3) * (7 + 2)
2 + ((2 + 6 + 9 + 3) * (6 + 3) * 3) * 6 * 3
(8 + 3 * 2 * 3 + (4 * 7 + 9 * 5 * 9 * 5)) + 3 + 6 * 8
6 * (3 + 2 * 9) * 6 + 4
(5 + 6 * 8 * 8 + 4) * 4 + (7 + 5) + 9 + 2
(9 * (6 * 9 * 9 * 3 * 2 + 4) * 9 + 2 * 2 * 5) * 3 + 8 * (2 * 9 * 9 * 7 + 5) + 7
8 + 7 * ((4 * 5 * 6 + 4 + 9) * 5) + 6 * ((8 + 2 * 4 * 9 * 8) * 6 * (4 + 2 * 8 + 2) * 9 + 3 * 2)
5 * 7 + (4 * (8 + 6 + 9 * 4 + 4 + 6) * 6)
(7 * 8 * (3 + 3) * 4 * 6) * 6 + 9 * 8 * 3
5 + ((7 + 6 + 2) * 7 + (2 * 7 + 7 * 9 + 8)) * 2 * 8
((2 + 3 + 7 * 8) * 3 * (9 * 2 + 9)) + (6 * 9 * 3 * 7 + 5) * 7 * 9
(5 * (8 * 2) * 3 * (4 * 2) + 8) + 3 * (5 * 3) + (8 + 4 * 8 * (5 * 6)) + 3 * 6
2 + ((7 * 9 + 2 * 5 * 9 + 8) + (6 * 4 * 5 * 7 + 3 + 7) * 8 + 7 * (9 * 3 + 9 * 3 * 2))
5 + 6 * 6 * (5 + 9 + (5 + 6 * 4) + 8)
(7 * 8 * (8 + 2) + (3 + 9 + 4 + 8)) + (6 * (2 * 5 * 3 + 6 * 6) * 7 + 5 * 8 * (9 + 4 * 5 + 8 + 6 * 4))
(8 * 6 + 8 * 5) * 7 * 6
9 + 8 + (2 * 6 * 4 * (6 + 5 * 5) * 3 + 9) + 4
7 + 6 + (2 * (7 + 9 + 6) * 7 + 5)
(2 * (9 * 2 + 2 * 8 + 6) * 6 * 4) * 3 * 3 + ((7 * 9 + 9 + 2 + 6 + 8) * (9 * 5 * 9 + 6) + (2 * 9) * 9 + 4 + (9 * 4))
6 * (9 * 5 * 4 + 7 * 6) * 4 * 7
((8 + 6) * 5 * 2) * 9 + (7 * 8) + 9 + ((8 * 3 * 7) * 7 * 2 + 3 * 7) * 2
5 + (7 + (7 * 3 + 2 * 5 + 6) + 7) * 4 * 5 + 2 + 7
4 * 7 * ((8 + 2 * 3 + 2 * 9 * 8) + (2 * 9) * (2 * 8 + 2) * 8 + 6 * 4) + (2 * (8 * 8) * 4 + 3)
9 + 5 * (4 + 7 * 3 + 3 * 2)
6 * 9 + 3 + (6 + 6 * (4 + 6 + 8 * 7 * 5)) + 6
(5 * 4 + 4 + (4 + 6) + (5 + 7)) + 7 + 6 * 3 * (8 + 5) + (5 + 5 + (5 + 5 * 4 * 9 + 4 * 4) + 4 + 5 * 8)
9 + (4 + (3 * 7 * 7 * 3)) * 4 * (8 * 5 * 9 * 3 + 5 + 9) * 2
2 + 6 * 9 * 5 * 4
7 * (5 * 4) + 3 * 8 + 8
(8 + 3 + (3 * 4 * 4 + 9 * 5) + 7) * (3 * 2 + 9 + 7 + 9) * 6 + 6
2 * 3 * 2 + 4
(4 * (9 * 3 + 9 + 3 + 8 + 4)) * 7 + 2 * 8
7 * (2 + 5 + 9 * 6 + 5) + 4 * (6 + 2 * 2)
(6 * 7 * 5 + 5 * 2) + 9
(2 + 4 + 4) * 4 + 9 + 2 * 8
6 * 9 * (9 + (9 * 4 + 2 + 7 * 5 + 3) * 6) * 5 + 4 + 7
6 * 8 * (2 * (7 + 6 * 3 * 8) * (6 * 8 * 3))
9 * 8 * 4 + 5 + ((7 + 4 + 6 + 9 + 6) * 5 * 2) + (9 * 2 + (7 + 9 * 6) + 6)
7 + 8 * (5 * 5) * 9
7 * 2 * 9 + 6 + 9 + (3 * 9 + 8 + 8 * 9 * 5)
6 + 3 * (6 * 5 * 8 * 8) * 7
4 * (4 + 7 + 4 * (9 * 2 + 3 * 9 * 8 * 7)) * (7 * 6 * 8) + 7 + 4 * 6
5 * 7 * 6
6 * 4
8 * ((8 * 8 + 4 * 3) * 9 + 6 * 7 + 4 + (4 * 8)) * 9
((3 + 3 * 2 * 8) * 9) + 7 + 4 + 8
3 * 7 + 9 * (3 + (5 * 3 + 2))
7 + 9 + 4 * 2
2 * (6 * 6 + (2 * 8 + 4 * 5) + 4 + 5 * 6) * 2 * 8
(5 * 2 * (8 * 9 + 5 * 4 + 9 * 4) + 7) * 9 + 6
4 * 5 + 9 + 7 * 8
2 * 6 * 5 * 6
2 + 9 * (6 * 4 + 6 + (7 + 9 * 7 * 5 + 7) * 6 + (8 * 2 * 9 * 7 * 9 * 4))
5 * 2 + 4 + 5 * 9
9 + 6 + 5 + (2 * (7 + 3) + (3 * 8) * 8 * 8 * 4) + 9
3 * (2 + 8) * 2 + 3 * 9 * 2
9 + ((9 + 2 * 4 + 7) * 4 + 8) + 3 + 2 + 2 + (5 * (5 * 9 * 4 * 8 * 8 * 9) * 2 * 5)
((9 * 8 * 2 * 2 * 2 + 7) + 7 + 7) + 2 + 5 * 2
7 + (7 + 6 * 9 * 5 + 9) * 6 + 6 + (8 + 9) + 7
(7 + 6 + 5 * 5 + 6) + 2 + 2 + 2 * 2
(4 + 2 * 9 * 6 + 8 + (5 * 7)) + 6 * 8 + 3 * 5
(8 * 6) * 6 * 9 * 6 + 7
3 * 8 + (4 + (2 + 8) * (3 * 6 + 3 * 5 + 9 * 3) * (9 * 6 * 6 * 2 + 5) + (9 + 9))
4 * (4 * 8 * 6 * 8 * 3) * 2
3 + (5 * 5 * 5 * (6 * 6) * 6 + 3) + 9 * 8
9 + 5 * 3 * (2 + 3 * 6 + 4 * (6 + 7 + 6 * 6) + 4) * 8 + 9
(5 + 5) * (2 + 3 * 3 * 8 * 9 * 7) * 4 + 4 * 8 + 9
7 + (4 + 6) + 5 + 6
(8 + (6 + 8 + 2 + 9 * 6 * 7) + 2) * 8 + 6 * (3 + 5) + 2
9 + 9 * 8 * (7 + 7 * 9 + 9 + 6 + (8 * 5))
5 * 9 * 3 * 5 * 3 + ((8 + 9 + 9) * 3 * 6 + 9 + 6)
(8 * 9 + 3 * 8) * 3 + (5 + 3 * (8 * 9 + 8) * (3 + 7 + 7 + 7) * 9)
4 * 7 + 7 + (6 * (2 * 8) * 2 + 4)
(3 + 9 * 2 * (5 * 8)) * 9
3 + 3 * 6 * 2 * (9 * 9) * 6
3 * 8 + (7 + 7 + (8 + 3) + (7 * 6 * 2) + 3)`
