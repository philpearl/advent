package main

import "fmt"

func main() {

	run(program, 1)
	run(program, 5)
}

func cp(program []int) []int {
	n := make([]int, len(program))
	copy(n, program)
	return n
}

func run(in []int, input int) int {
	program := cp(in)
	for i := 0; i < len(program); {
		opcode := program[i]
		switch opcode % 100 {
		// 0 position mode
		// 1 immediate mode
		case 1:
			p0 := program[i+1]
			if (opcode/100)%10 == 0 {
				p0 = program[p0]
			}
			p1 := program[i+2]
			if (opcode/1000)%10 == 0 {
				p1 = program[p1]
			}
			if (opcode/10000)%10 == 0 {
				program[program[i+3]] = p0 + p1
			} else {
				program[i+3] = p0 + p1
			}
			i += 4
		case 2:
			p0 := program[i+1]
			if (opcode/100)%10 == 0 {
				p0 = program[p0]
			}
			p1 := program[i+2]
			if (opcode/1000)%10 == 0 {
				p1 = program[p1]
			}
			if (opcode/10000)%10 == 0 {
				program[program[i+3]] = p0 * p1
			} else {
				program[i+3] = p0 * p1
			}
			i += 4
		case 3:
			p0 := &program[i+1]
			if (opcode/100)%10 == 0 {
				p0 = &program[*p0]
			}
			// Save input here
			*p0 = input
			i += 2
		case 4:
			p0 := program[i+1]
			if (opcode/100)%10 == 0 {
				p0 = program[p0]
			}
			// Send this to output
			fmt.Println(p0)
			i += 2
		case 5:
			p0 := program[i+1]
			if (opcode/100)%10 == 0 {
				p0 = program[p0]
			}
			p1 := program[i+2]
			if (opcode/1000)%10 == 0 {
				p1 = program[p1]
			}
			if p0 != 0 {
				i = p1
			} else {
				i += 3
			}
		case 6:
			p0 := program[i+1]
			if (opcode/100)%10 == 0 {
				p0 = program[p0]
			}
			p1 := program[i+2]
			if (opcode/1000)%10 == 0 {
				p1 = program[p1]
			}
			if p0 == 0 {
				i = p1
			} else {
				i += 3
			}
		case 7:
			p0 := program[i+1]
			if (opcode/100)%10 == 0 {
				p0 = program[p0]
			}
			p1 := program[i+2]
			if (opcode/1000)%10 == 0 {
				p1 = program[p1]
			}
			p2 := &program[i+3]
			if (opcode/10000)%10 == 0 {
				p2 = &program[*p2]
			}
			if p0 < p1 {
				*p2 = 1
			} else {
				*p2 = 0
			}
			i += 4
		case 8:
			p0 := program[i+1]
			if (opcode/100)%10 == 0 {
				p0 = program[p0]
			}
			p1 := program[i+2]
			if (opcode/1000)%10 == 0 {
				p1 = program[p1]
			}
			p2 := &program[i+3]
			if (opcode/10000)%10 == 0 {
				p2 = &program[*p2]
			}
			if p0 == p1 {
				*p2 = 1
			} else {
				*p2 = 0
			}
			i += 4

		case 99:
			return program[0]
		default:
			panic(fmt.Sprintf("bad opcode %d", opcode))
		}
	}
	panic("off the end")
}

var program = []int{3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 1102, 78, 40, 225, 1102, 52, 43, 224, 1001, 224, -2236, 224, 4, 224, 102, 8, 223, 223, 101, 4, 224, 224, 1, 224, 223, 223, 1, 191, 61, 224, 1001, 224, -131, 224, 4, 224, 102, 8, 223, 223, 101, 4, 224, 224, 1, 223, 224, 223, 1101, 86, 74, 225, 1102, 14, 76, 225, 1101, 73, 83, 224, 101, -156, 224, 224, 4, 224, 102, 8, 223, 223, 101, 6, 224, 224, 1, 224, 223, 223, 1102, 43, 82, 225, 2, 196, 13, 224, 101, -6162, 224, 224, 4, 224, 102, 8, 223, 223, 101, 5, 224, 224, 1, 223, 224, 223, 1001, 161, 51, 224, 101, -70, 224, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 1, 224, 1, 224, 223, 223, 102, 52, 187, 224, 1001, 224, -832, 224, 4, 224, 102, 8, 223, 223, 101, 1, 224, 224, 1, 224, 223, 223, 1102, 19, 79, 225, 101, 65, 92, 224, 1001, 224, -147, 224, 4, 224, 1002, 223, 8, 223, 101, 4, 224, 224, 1, 223, 224, 223, 1102, 16, 90, 225, 1102, 45, 44, 225, 1102, 92, 79, 225, 1002, 65, 34, 224, 101, -476, 224, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 5, 224, 1, 224, 223, 223, 4, 223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 107, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 329, 1001, 223, 1, 223, 1007, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 344, 101, 1, 223, 223, 1008, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 359, 1001, 223, 1, 223, 8, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 374, 101, 1, 223, 223, 1107, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 389, 101, 1, 223, 223, 1108, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 404, 101, 1, 223, 223, 107, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 419, 1001, 223, 1, 223, 7, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 434, 101, 1, 223, 223, 1007, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 449, 1001, 223, 1, 223, 108, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 464, 1001, 223, 1, 223, 108, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 479, 101, 1, 223, 223, 107, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 494, 1001, 223, 1, 223, 7, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 509, 101, 1, 223, 223, 1108, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 524, 101, 1, 223, 223, 1107, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 539, 101, 1, 223, 223, 1008, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 554, 101, 1, 223, 223, 1008, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 569, 101, 1, 223, 223, 1107, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 584, 1001, 223, 1, 223, 1108, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 599, 101, 1, 223, 223, 7, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 614, 101, 1, 223, 223, 108, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 629, 101, 1, 223, 223, 1007, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 644, 101, 1, 223, 223, 8, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 659, 101, 1, 223, 223, 8, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 674, 101, 1, 223, 223, 4, 223, 99, 226}
