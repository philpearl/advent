package main

import (
	"fmt"
	"os"
	"strconv"
	"strings"
)

func main() {
	run1(input)
}

type pos struct{ x, y int }

func (p pos) add(p2 pos) pos {
	return pos{x: p2.x + p.x, y: p2.y + p.y}
}

func (p pos) left() pos {
	// 1, 0 => 0, -1
	return pos{x: p.y, y: -p.x}
}

func (p pos) right() pos {
	return pos{x: -p.y, y: p.x}
}

type explore struct {
	computer amp
	world    map[pos]byte
	curr     pos
	robot    pos
}

func (e *explore) init(program []int) {
	e.computer.program = cp(program)
	e.computer.output = e.output
	e.world = make(map[pos]byte)
}

func (e *explore) output(o int) {
	os.Stdout.Write([]byte{byte(o)})
	e.world[e.curr] = byte(o)
	if o == '^' {
		e.robot = e.curr
	}

	e.curr.x++
	if o == 10 {
		e.curr.x = 0
		e.curr.y++
	}
}

func run1(input []int) {

	var e explore

	e.init(input)
	e.computer.run()

	var total int
	for p, r := range e.world {
		if r != '#' {
			continue
		}
		intersection := true
		for _, v := range []pos{{-1, 0}, {0, -1}, {1, 0}, {0, 1}} {
			if e.world[p.add(v)] != '#' {
				intersection = false
				break
			}
		}
		if intersection {
			total += p.x * p.y
		}
	}
	fmt.Println(total)

	// Right, so we have a map. Let's run over it. We just keep going in a
	// straight line until we can't. Then turn.
	dirn := pos{x: 0, y: -1}
	p := e.robot
	var route []string
	var count int
	for {
		next := p.add(dirn)
		if e.world[next] == '#' {
			count++
			p = next
			continue
		}
		// turn right or left. Only one will have #
		if count != 0 {
			route = append(route, strconv.Itoa(count))
			count = 0
		}

		next = p.add(dirn.left())
		if e.world[next] == '#' {
			dirn = dirn.left()
			route = append(route, "L")
			continue
		}
		next = p.add(dirn.right())
		if e.world[next] == '#' {
			dirn = dirn.right()
			route = append(route, "R")
			continue
		}

		break
	}

	fmt.Println(strings.Join(route, ","))

	// We have a route. We need to split it up into subprograms A, B, C

	/*
			A	L............R........L......R........L......
			B	R........L............L............R........
			A	L............R........L......R........L......
			A	L............R........L......R........L......
			B	R........L............L............R........
			C	L......R......L............
			B	R........L............L............R........
			C	L......R......L............
			C	L......R......L............
			B	R........L............L............R........

			Easiest to split this by hand. Not sure how to do automatically.
			Which is a bit rubbish. Might come back to this.

		L,12,R,8,L,6,R,8,L,6,
		R,8,L,12,L,12,R,8,
		L,12,R,8,L,6,R,8,L,6,
		L,12,R,8,L,6,R,8,L,6,
		R,8,L,12,L,12,R,8,
		L,6,R,6,L,12,
		R,8,L,12,L,12,R,8,
		L,6,R,6,L,12,
		L,6,R,6,L,12,
		R,8,L,12,L,12,R,8
	*/

	solution := []byte(`A,B,A,A,B,C,B,C,C,B
L,12,R,8,L,6,R,8,L,6
R,8,L,12,L,12,R,8
L,6,R,6,L,12
n
`)

	var comp amp
	comp.program = cp(input)
	comp.output = func(o int) {
		if o > 255 {
			fmt.Println(o)
		} else {
			os.Stdout.Write([]byte{byte(o)})
		}
	}
	comp.inputs = solution
	comp.program[0] = 2

	comp.run()

	// printArena(e.world)

	// Finally we want a BFS to explore the whole map starting at the oxygen
	// location. We're interested in the depth of the search. Beware fence posts
	// navigate(e.oxygen, pos{x: -100000}, e.world)
}

type amp struct {
	program []int
	inputs  []byte
	output  func(o int)
}

func cp(program []int) []int {
	n := make([]int, len(program)*10)
	copy(n, program)
	return n
}

func (a *amp) run() int {
	var base int
	pv := func(pc, num, opcode int) *int {
		v := &a.program[pc+num]
		for i := 0; i <= num; i++ {
			opcode /= 10
		}
		if opcode%10 == 2 {
			v = &a.program[*v+base]
		} else if opcode%10 == 0 {
			v = &a.program[*v]
		}
		return v
	}
	for i := 0; i < len(a.program); {
		opcode := a.program[i]
		switch opcode % 100 {
		case 1:
			*pv(i, 3, opcode) = *pv(i, 1, opcode) + *pv(i, 2, opcode)
			i += 4
		case 2:
			*pv(i, 3, opcode) = *pv(i, 1, opcode) * *pv(i, 2, opcode)
			i += 4
		case 3:
			// Save input here
			*pv(i, 1, opcode) = int(a.inputs[0])
			a.inputs = a.inputs[1:]
			i += 2
		case 4:
			// Send this to output
			a.output(*pv(i, 1, opcode))
			i += 2
		case 5:
			if *pv(i, 1, opcode) != 0 {
				i = *pv(i, 2, opcode)
			} else {
				i += 3
			}
		case 6:
			if *pv(i, 1, opcode) == 0 {
				i = *pv(i, 2, opcode)
			} else {
				i += 3
			}
		case 7:
			if *pv(i, 1, opcode) < *pv(i, 2, opcode) {
				*pv(i, 3, opcode) = 1
			} else {
				*pv(i, 3, opcode) = 0
			}
			i += 4
		case 8:
			if *pv(i, 1, opcode) == *pv(i, 2, opcode) {
				*pv(i, 3, opcode) = 1
			} else {
				*pv(i, 3, opcode) = 0
			}
			i += 4
		case 9:
			base += *pv(i, 1, opcode)
			i += 2

		case 99:
			return a.program[0]
		default:
			panic(fmt.Sprintf("bad opcode %d", opcode))
		}
	}
	panic("off the end")
}

var input = []int{
	1, 330, 331, 332, 109, 5242, 1101, 1182, 0, 16, 1102, 1521, 1, 24, 102, 1, 0, 570, 1006, 570, 36, 102, 1, 571, 0, 1001, 570, -1, 570, 1001, 24, 1, 24, 1106, 0, 18, 1008, 571, 0, 571, 1001, 16, 1, 16, 1008, 16, 1521, 570, 1006, 570, 14, 21101, 0, 58, 0, 1105, 1, 786, 1006, 332, 62, 99, 21102, 333, 1, 1, 21101, 73, 0, 0, 1106, 0, 579, 1101, 0, 0, 572, 1102, 0, 1, 573, 3, 574, 101, 1, 573, 573, 1007, 574, 65, 570, 1005, 570, 151, 107, 67, 574, 570, 1005, 570, 151, 1001, 574, -64, 574, 1002, 574, -1, 574, 1001, 572, 1, 572, 1007, 572, 11, 570, 1006, 570, 165, 101, 1182, 572, 127, 101, 0, 574, 0, 3, 574, 101, 1, 573, 573, 1008, 574, 10, 570, 1005, 570, 189, 1008, 574, 44, 570, 1006, 570, 158, 1105, 1, 81, 21102, 340, 1, 1, 1106, 0, 177, 21101, 0, 477, 1, 1106, 0, 177, 21102, 1, 514, 1, 21102, 176, 1, 0, 1105, 1, 579, 99, 21102, 184, 1, 0, 1106, 0, 579, 4, 574, 104, 10, 99, 1007, 573, 22, 570, 1006, 570, 165, 102, 1, 572, 1182, 21101, 375, 0, 1, 21101, 0, 211, 0, 1105, 1, 579, 21101, 1182, 11, 1, 21102, 222, 1, 0, 1106, 0, 979, 21102, 1, 388, 1, 21102, 1, 233, 0, 1106, 0, 579, 21101, 1182, 22, 1, 21101, 244, 0, 0, 1106, 0, 979, 21101, 0, 401, 1, 21102, 255, 1, 0, 1105, 1, 579, 21101, 1182, 33, 1, 21101, 0, 266, 0, 1106, 0, 979, 21102, 1, 414, 1, 21102, 277, 1, 0, 1106, 0, 579, 3, 575, 1008, 575, 89, 570, 1008, 575, 121, 575, 1, 575, 570, 575, 3, 574, 1008, 574, 10, 570, 1006, 570, 291, 104, 10, 21101, 1182, 0, 1, 21101, 313, 0, 0, 1105, 1, 622, 1005, 575, 327, 1101, 1, 0, 575, 21102, 327, 1, 0, 1106, 0, 786, 4, 438, 99, 0, 1, 1, 6, 77, 97, 105, 110, 58, 10, 33, 10, 69, 120, 112, 101, 99, 116, 101, 100, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 110, 97, 109, 101, 32, 98, 117, 116, 32, 103, 111, 116, 58, 32, 0, 12, 70, 117, 110, 99, 116, 105, 111, 110, 32, 65, 58, 10, 12, 70, 117, 110, 99, 116, 105, 111, 110, 32, 66, 58, 10, 12, 70, 117, 110, 99, 116, 105, 111, 110, 32, 67, 58, 10, 23, 67, 111, 110, 116, 105, 110, 117, 111, 117, 115, 32, 118, 105, 100, 101, 111, 32, 102, 101, 101, 100, 63, 10, 0, 37, 10, 69, 120, 112, 101, 99, 116, 101, 100, 32, 82, 44, 32, 76, 44, 32, 111, 114, 32, 100, 105, 115, 116, 97, 110, 99, 101, 32, 98, 117, 116, 32, 103, 111, 116, 58, 32, 36, 10, 69, 120, 112, 101, 99, 116, 101, 100, 32, 99, 111, 109, 109, 97, 32, 111, 114, 32, 110, 101, 119, 108, 105, 110, 101, 32, 98, 117, 116, 32, 103, 111, 116, 58, 32, 43, 10, 68, 101, 102, 105, 110, 105, 116, 105, 111, 110, 115, 32, 109, 97, 121, 32, 98, 101, 32, 97, 116, 32, 109, 111, 115, 116, 32, 50, 48, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 115, 33, 10, 94, 62, 118, 60, 0, 1, 0, -1, -1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 60, 24, 0, 109, 4, 2101, 0, -3, 586, 21002, 0, 1, -1, 22101, 1, -3, -3, 21102, 1, 0, -2, 2208, -2, -1, 570, 1005, 570, 617, 2201, -3, -2, 609, 4, 0, 21201, -2, 1, -2, 1105, 1, 597, 109, -4, 2105, 1, 0, 109, 5, 2101, 0, -4, 629, 21002, 0, 1, -2, 22101, 1, -4, -4, 21102, 1, 0, -3, 2208, -3, -2, 570, 1005, 570, 781, 2201, -4, -3, 653, 20101, 0, 0, -1, 1208, -1, -4, 570, 1005, 570, 709, 1208, -1, -5, 570, 1005, 570, 734, 1207, -1, 0, 570, 1005, 570, 759, 1206, -1, 774, 1001, 578, 562, 684, 1, 0, 576, 576, 1001, 578, 566, 692, 1, 0, 577, 577, 21102, 1, 702, 0, 1106, 0, 786, 21201, -1, -1, -1, 1106, 0, 676, 1001, 578, 1, 578, 1008, 578, 4, 570, 1006, 570, 724, 1001, 578, -4, 578, 21101, 731, 0, 0, 1106, 0, 786, 1105, 1, 774, 1001, 578, -1, 578, 1008, 578, -1, 570, 1006, 570, 749, 1001, 578, 4, 578, 21101, 756, 0, 0, 1105, 1, 786, 1106, 0, 774, 21202, -1, -11, 1, 22101, 1182, 1, 1, 21102, 774, 1, 0, 1106, 0, 622, 21201, -3, 1, -3, 1106, 0, 640, 109, -5, 2105, 1, 0, 109, 7, 1005, 575, 802, 20101, 0, 576, -6, 21002, 577, 1, -5, 1105, 1, 814, 21101, 0, 0, -1, 21101, 0, 0, -5, 21102, 0, 1, -6, 20208, -6, 576, -2, 208, -5, 577, 570, 22002, 570, -2, -2, 21202, -5, 61, -3, 22201, -6, -3, -3, 22101, 1521, -3, -3, 2101, 0, -3, 843, 1005, 0, 863, 21202, -2, 42, -4, 22101, 46, -4, -4, 1206, -2, 924, 21102, 1, 1, -1, 1106, 0, 924, 1205, -2, 873, 21102, 35, 1, -4, 1106, 0, 924, 2102, 1, -3, 878, 1008, 0, 1, 570, 1006, 570, 916, 1001, 374, 1, 374, 2101, 0, -3, 895, 1101, 2, 0, 0, 2101, 0, -3, 902, 1001, 438, 0, 438, 2202, -6, -5, 570, 1, 570, 374, 570, 1, 570, 438, 438, 1001, 578, 558, 922, 20101, 0, 0, -4, 1006, 575, 959, 204, -4, 22101, 1, -6, -6, 1208, -6, 61, 570, 1006, 570, 814, 104, 10, 22101, 1, -5, -5, 1208, -5, 61, 570, 1006, 570, 810, 104, 10, 1206, -1, 974, 99, 1206, -1, 974, 1101, 0, 1, 575, 21102, 1, 973, 0, 1106, 0, 786, 99, 109, -7, 2105, 1, 0, 109, 6, 21101, 0, 0, -4, 21102, 0, 1, -3, 203, -2, 22101, 1, -3, -3, 21208, -2, 82, -1, 1205, -1, 1030, 21208, -2, 76, -1, 1205, -1, 1037, 21207, -2, 48, -1, 1205, -1, 1124, 22107, 57, -2, -1, 1205, -1, 1124, 21201, -2, -48, -2, 1106, 0, 1041, 21101, -4, 0, -2, 1106, 0, 1041, 21101, -5, 0, -2, 21201, -4, 1, -4, 21207, -4, 11, -1, 1206, -1, 1138, 2201, -5, -4, 1059, 2101, 0, -2, 0, 203, -2, 22101, 1, -3, -3, 21207, -2, 48, -1, 1205, -1, 1107, 22107, 57, -2, -1, 1205, -1, 1107, 21201, -2, -48, -2, 2201, -5, -4, 1090, 20102, 10, 0, -1, 22201, -2, -1, -2, 2201, -5, -4, 1103, 1201, -2, 0, 0, 1105, 1, 1060, 21208, -2, 10, -1, 1205, -1, 1162, 21208, -2, 44, -1, 1206, -1, 1131, 1106, 0, 989, 21101, 439, 0, 1, 1105, 1, 1150, 21102, 1, 477, 1, 1106, 0, 1150, 21102, 1, 514, 1, 21101, 1149, 0, 0, 1106, 0, 579, 99, 21101, 1157, 0, 0, 1105, 1, 579, 204, -2, 104, 10, 99, 21207, -3, 22, -1, 1206, -1, 1138, 2101, 0, -5, 1176, 1202, -4, 1, 0, 109, -6, 2105, 1, 0, 24, 13, 48, 1, 11, 1, 48, 1, 11, 1, 48, 1, 11, 1, 48, 1, 3, 13, 44, 1, 3, 1, 7, 1, 3, 1, 44, 1, 3, 1, 7, 1, 3, 1, 44, 1, 3, 1, 7, 1, 3, 1, 44, 1, 3, 1, 7, 7, 42, 1, 3, 1, 11, 1, 1, 1, 40, 7, 11, 7, 36, 1, 1, 1, 17, 1, 3, 1, 30, 9, 17, 1, 3, 1, 30, 1, 5, 1, 19, 1, 3, 1, 30, 1, 5, 1, 19, 1, 3, 1, 30, 1, 5, 1, 19, 1, 3, 1, 30, 1, 5, 1, 19, 7, 28, 1, 5, 1, 23, 1, 1, 1, 28, 1, 5, 1, 23, 13, 18, 1, 5, 1, 25, 1, 9, 1, 18, 1, 5, 1, 25, 1, 9, 1, 18, 1, 5, 1, 25, 1, 9, 1, 16, 9, 25, 1, 9, 1, 16, 1, 1, 1, 31, 1, 9, 1, 10, 9, 31, 13, 8, 1, 5, 1, 43, 1, 10, 1, 5, 1, 43, 1, 10, 1, 5, 1, 43, 1, 10, 1, 5, 1, 43, 1, 10, 1, 5, 1, 43, 1, 2, 9, 5, 1, 35, 9, 2, 1, 13, 1, 35, 1, 10, 1, 13, 1, 35, 1, 10, 1, 13, 1, 35, 1, 10, 1, 13, 13, 23, 1, 10, 1, 25, 1, 23, 1, 10, 13, 13, 1, 23, 1, 22, 1, 13, 1, 23, 1, 22, 1, 13, 1, 23, 1, 22, 1, 13, 1, 23, 1, 22, 1, 13, 1, 23, 1, 22, 1, 13, 1, 23, 1, 22, 1, 13, 1, 17, 7, 22, 1, 31, 1, 28, 7, 25, 1, 34, 1, 25, 1, 34, 1, 25, 1, 34, 1, 25, 1, 34, 1, 17, 9, 34, 1, 17, 1, 42, 1, 17, 1, 42, 1, 17, 1, 42, 7, 11, 1, 48, 1, 11, 1, 48, 1, 11, 1, 48, 1, 11, 1, 48, 1, 11, 1, 48, 1, 11, 1, 48, 1, 11, 1, 48, 1, 11, 1, 48, 13, 24,
}
